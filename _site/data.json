[{"permalink":"//","layout":"default","title":null,"content":"<img src=\"images/LogoPythonPal.png\">\n\n<!-- # jekyll-rtd-theme -->\n\n<a href=\"https://www.gnu.org/licenses/gpl-3.0\"> ![my badge](https://badgen.net/badge/License/GPLv3/blue?){:target=\"_blank\" rel=\"noopener\"}\n\n\n## What is pythonPal4foam (aka pythonPal)?\n\npythonPal4foam is a header-only library for running Python codes in OpenFOAM, including the manipulation of OpenFOAM fields via Python.\n\n## Where do I start?\nFirst, check the [preliminaries](/preliminaries/installingPybind.html) and install the dependencies. Then, follow the [tutorial](/tutorials/pythonPalIcoFoam.html) guide.\n\n## Acknowledgements\n\n- OPENFOAM® is a registered trademark of OpenCFD Limited, producer and distributor of the OpenFOAM software via [www.openfoam.com](https://www.openfoam.com).\n\n- Financial support is gratefully acknowledged from the Irish Research Council through the Laureate\nprogramme, grant number IRCLA/2017/45.\n\n- Additionally, the authors want to acknowledge project affiliates, Bekaert, through the Bekaert University\nTechnology Centre (UTC) at UCD (www.ucd.ie/bekaert), and I-Form, funded by Science Foundation Ireland\n(SFI) Grant Number 16/RC/3872, co-funded under European Regional Development Fund and by I-Form\nindustry partners.\n\n- The authors wish to acknowledge the DJEI/DES/SFI/HEA Irish Centre for High-End Computing (ICHEC) for\nthe provision of computational facilities and support (www.ichec.ie).\n\n\n<img src=\"images/LogosPythonPalWebsite.svg\" width=\"100%%\" > \n<!-- <a href=\"https://research.ie/\"> <img src=\"images/ircLogo.png\" width=\"30%\"> -->","dir":"/","name":"README.md","path":"README.md","url":"/"},{"layout":"default","title":"Contributors","content":"<h1 id=\"contributors\">Contributors</h1>\n\n<p>We’d love to hear your comments about pythonPal.</p>\n\n<p>Feel free to reach out any of the contributors:</p>\n\n<h2 id=\"simon-rodriguez\">Simon Rodriguez</h2>\n\n<p>simon.rodriguezluzardo@ucdconnect.ie</p>\n\n<p>Developer</p>\n\n<p><a href=\"https://www.linkedin.com/in/simonrodriguezl/\"> <img src=\"https://badgen.net/badge/LinkedIn/simonrodriguezl/blue?\" alt=\"LinkedinSimon\" target=\"_blank\" rel=\"noopener\" /> <a href=\"https://www.youtube.com/channel/UCdiVaIQO_fpKP9tk-tDhm1w/videos\"> <img src=\"https://badgen.net/badge/YouTube/SimonMeansSimulation/blue?\" alt=\"YoutubeSimon\" target=\"_blank\" rel=\"noopener\" /> <a href=\"https://twitter.com/simonrodriguezl\"> <img src=\"https://badgen.net/badge/Twitter/simonrodriguezl/blue?\" alt=\"TwitterSimon\" target=\"_blank\" rel=\"noopener\" /> <a href=\"https://www.instagram.com/simonrodriguezluz/\"> <img src=\"https://badgen.net/badge/Instagram/simonrodriguezluz/blue?\" alt=\"InstagramSimon\" target=\"_blank\" rel=\"noopener\" /></a></a></a></a></p>\n\n<h2 id=\"philip-cardiff\">Philip Cardiff</h2>\n\n<p>philip.cardiff@ucd.ie</p>\n\n<p>Developer</p>\n\n<p><a href=\"https://www.linkedin.com/in/philipcardiff/\"> <img src=\"https://badgen.net/badge/LinkedIn/philipcardiff/blue?\" alt=\"LinkedinPhilip\" target=\"_blank\" rel=\"noopener\" /> <a href=\"https://www.youtube.com/channel/UCf3OlguJB4NyvhFjLQbMxKw\"> <img src=\"https://badgen.net/badge/YouTube/PhilipCardiff/blue?\" alt=\"YoutubePhilip\" target=\"_blank\" rel=\"noopener\" /> <a href=\"https://twitter.com/phiiliipc\"> <img src=\"https://badgen.net/badge/Twitter/phiiliipc/blue?\" alt=\"TwitterPhilip\" target=\"_blank\" rel=\"noopener\" /></a></a></a></p>\n","dir":"/about/","name":"contributors.md","path":"about/contributors.md","url":"/about/contributors.html"},{"layout":"default","title":"BibTex entry","content":"<h1 id=\"bibtex-entry\">BibTex entry</h1>\n\n<p>Currently, the paper where we introduce pythonPal is under review.</p>\n\n<p>In the meanwhile, please cite our <a href=\"https://tinyurl.com/pybind11foam\">pre-print</a>:</p>\n\n<div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>@misc{https://doi.org/10.48550/arxiv.2203.16394,\ndoi = {10.48550/ARXIV.2203.16394},\nurl = {https://arxiv.org/abs/2203.16394},\nauthor = {Rodriguez, Simon and Cardiff, Philip},\nkeywords = {Computational Engineering, Finance, and Science (cs.CE), FOS: Computer and information sciences, FOS: Computer and information sciences},\ntitle = {A general approach for running Python codes in OpenFOAM using an embedded pybind11 Python interpreter},\npublisher = {arXiv},\nyear = {2022},\ncopyright = {Creative Commons Attribution 4.0 International}\n}\n</code></pre>  </div></div>\n","dir":"/citing/","name":"bibTexEntry.md","path":"citing/bibTexEntry.md","url":"/citing/bibTexEntry.html"},{"layout":"default","title":"Getting set up","content":"# Getting set up\n\n## Installing pybind11\n\nAs explained in [how Does It Work?](/howDoesItWork/runningPythoninOpenFOAMwithpybind11.html), pythonPal uses the header-only library [pybind11](https://pybind11.readthedocs.io/en/stable/index.html) to enable the Python/OpenFOAM communication. \n\nWe recommend to install pybind11 with [Conda](https://docs.conda.io/en/latest/). On a *nix system:\n\n```bash\nconda install −c conda−forge pybind11\n```\n\n## Setting up the environment variables\n\nTo use the pythonPal, we need to let OpenFOAM know where both pybind11 and the Python interpreter are located in the system. \n\nAn easy way to do this is to declare two environment variables, `PYBIND11_INC_DIR` and `PYBIND11_LIB_DIR`, whose values are retrieved with the following commands:\n\n```bash\nexport PYBIND11_INC_DIR=$(python3 −m pybind11 −−includes)\nexport PYBIND11_LIB_DIR=$(python −c ’from distutils import sysconfig; print(sysconfig.get_config_var(\"LIBDIR\"))’)\n```\n\nThen, this environment variables must be included in your OpenFOAM code:\n\n- Include `PYBIND11_INC_DIR` in the `EXE_INC` field, for example:\n\n```bash\nEXE_INC = \\\n $(PYBIND11 INC DIR)\n```\n\n- Include `PYBIND11_LIB_DIR` and the Python C dynamic library in the `EXE_LIBS` field (or in the `LIB_LIBS` field if compiling a library), for example:\n\n```bash\nEXE_LIBS = \\\n −L$(PYBIND11 LIB DIR) \\\n −lpython3.8\n```\n\n## Download pythonPal\n\nFinally, download the [pythonPal.H](/preliminaries/pythonPal.H) file and include it in your OpenFOAM application, as explained in the [tutorials](/tutorials/pythonPalIcoFoam.html).","dir":"/preliminaries/","name":"installingPybind.md","path":"preliminaries/installingPybind.md","url":"/preliminaries/installingPybind.html"},{"layout":"default","title":"API","content":"<h1 id=\"api\">API</h1>\n\n<h2 id=\"class-constructor\">Class constructor</h2>\n\n<blockquote>\n <p>pythonPal (const fileName&amp; pythonScript, const bool&amp; debug = true)</p>\n</blockquote>\n\n<p>The python file address (<code class=\"language-plaintext highlighter-rouge\">pythonScript</code>) is a required argument. An optional <code class=\"language-plaintext highlighter-rouge\">debug</code> switch can be given to control how much information is printed to the standard output</p>\n\n<h2 id=\"public-member-functions\">Public member functions:</h2>\n\n<blockquote>\n <p>void passToPython(List&amp; myList, const py::str&amp; fieldNameInPython) const</p>\n</blockquote>\n\n<p>This function creates a NumPy array in the Python interpreter with the name <code class=\"language-plaintext highlighter-rouge\">fieldNameInPython</code> which references the data from the OpenFOAM <code class=\"language-plaintext highlighter-rouge\">List/Field</code> <code class=\"language-plaintext highlighter-rouge\">myList</code> . After this, any transformation of the <code class=\"language-plaintext highlighter-rouge\">fieldNameInPython</code> or <code class=\"language-plaintext highlighter-rouge\">myList</code> will be propagated to the other side.</p>\n\n<p>When an OpenFOAM <code class=\"language-plaintext highlighter-rouge\">GeometricField</code> is passed via <code class=\"language-plaintext highlighter-rouge\">passToPython</code>, it will only transfer the internal field; if required, the boundary patches must be independently transferred.</p>\n\n<blockquote>\n <p>void execute(const word&amp; command) const</p>\n</blockquote>\n\n<p>This executes the Python command given by <code class=\"language-plaintext highlighter-rouge\">command</code>.</p>\n","dir":"/referenceGuide/","name":"API.md","path":"referenceGuide/API.md","url":"/referenceGuide/API.html"},{"sort":1,"layout":"default","title":"Running Python in OpenFOAM with pybind11","content":"# Running Python in OpenFOAM with pybind11\n\nIn 2022, Rodriguez and Cardiff introduced an approach to run Python codes in OpenFOAM ([see paper](https://tinyurl.com/pybind11foam)), based on the header-only library pybind11.\n\nWith pybind11, they were able to embed a Python interpreter in OpenFOAM and interact with it. The conceptual flowchart they presented is shown in the figure.\n\n<img src=\"/images/6steps.png\" alt=\"6 steps to communicate Python and OpenFOAM\">\n\n\nTo achieve an efficient data transfer, they combined [_ctypes_](https://docs.python.org/3/library/ctypes.html), NumPy's built-in support for [_ctypes_](https://docs.python.org/3/library/ctypes.html) and OpenFOAM's `data` (or `cdata`) functions for OpenFOAM `Lists/fields`. \n\n\n**pythonPal hides the details related to `ctypes`, `NumPy` and `data` by offering higher-level methods to transfer data between OpenFOAM and Python and execute general Python code.**","dir":"/howDoesItWork/","name":"runningPythoninOpenFOAMwithpybind11.md","path":"howDoesItWork/runningPythoninOpenFOAMwithpybind11.md","url":"/howDoesItWork/runningPythoninOpenFOAMwithpybind11.html"},{"sort":1,"permalink":"/preliminaries/","layout":"default","title":"Preliminaries","content":"<h1 id=\"preliminaries\">Preliminaries</h1>\n\n<ul>\n <li><a href=\"/preliminaries/installingPybind.html\">Getting set up</a></li>\n</ul>\n","dir":"/preliminaries/","name":"README.md","path":"preliminaries/README.md","url":"/preliminaries/"},{"sort":1,"layout":"default","title":"My first tutorial: pythonPalIcoFoam","content":"# My first tutorial: pythonPalIcoFoam\n\n\nIn this tutorial, we create a modified version of `icoFoam` called `pythonPalIcoFoam`, where we use pythonPal to calculate the specific kinetic energy, _k=U*U/2_, via Python. Then, we solve the classic [cavity](https://doc.cfd.direct/openfoam/user-guide-v6/cavity) case with this.\n\nProvided that _pybind11_ is installed (see [installing](/preliminaries/installingPybind.html#installing-pybind11)), the steps to go from `icoFoam` to `pythonPalIcoFoam` are:\n\n- Copy the base `icoFoam` solver to your working directory and rename it to `pythonPalIcoFoam.C`.\n\n- Copy the `pythonPal.H` file to your working directory.\n\n- Include `pythonPal.H` at the top of `pythonPalIcoFoam.C`;\n\n```C\n#include \"pythonPal.H\"\n```\n\n- In `createFields.H`, construct a `volScalarField` called `k`, initialised to zero;\n\n```C\nvolScalarField k\n(\n IOobject\n (\n \"k\",\n mesh.time().timeName(),\n mesh,\n IOobject::READ_IF_PRESENT,\n IOobject::AUTO_WRITE\n ),\n mesh,\n dimensionedScalar(\"k\", dimensionSet(0, 2, -2, 0, 0, 0, 0), 0.0)\n);\n```\n\n- In the parent folder, create a Python file and define a function that receives the `U` field from OpenFOAM and calculates `k`. \n\nWe called that file `python_script.py` and the function `calculatek`.\n\n```bash\ntouch python_script.py\n```\n\n```Python\ndef calculatek(field):\n return np.sum(field * field, axis = 1)[:, np.newaxis] / 2\n```\n\n- In `pythonPalIcoFoam.C`, create an object of type pythonPal and load the Python file `python_script.py`:\n\n```bash\npythonPal myPythonPal(\"python_script.py\", true);\n```\n\n- At the end of the time-loop, pass the `U` and `k` fields to Python via pythonPal:\n\n```C\nmyPythonPal.passToPython(U, \"U\");\nmyPythonPal.passToPython(k, \"k\");\n```\n\n- Calculate `k` via pythonPal:\n\n```C\nmyPythonPal.execute(\"k[:, :] = calculatek(U)\");\n```\n\n- Finally, write the `k` field to disk, e.g. for viewing in ParaView.\n\n```C\nk.write();\n```\n\nFigure shows the cavity case’s velocity magnitude and specific kinetic energy field results.\n\n<img src=\"/images/pythonPalResult.PNG\" alt=\"cavity case's results\" width=\"80%\" >","dir":"/tutorials/","name":"pythonPalIcoFoam.md","path":"tutorials/pythonPalIcoFoam.md","url":"/tutorials/pythonPalIcoFoam.html"},{"sort":2,"permalink":"/tutorials/","layout":"default","title":"Tutorials","content":"<h1 id=\"tutorials\">Tutorials</h1>\n\n<ul>\n <li><a href=\"/tutorials/pythonPalIcoFoam.html\">My first tutorial: pythonPalIcoFoam</a></li>\n</ul>\n","dir":"/tutorials/","name":"README.md","path":"tutorials/README.md","url":"/tutorials/"},{"sort":3,"permalink":"/howDoesItWork/","layout":"default","title":"How does it work?","content":"<h1 id=\"how-does-it-work\">How does it work?</h1>\n\n<ul>\n <li><a href=\"/howDoesItWork/runningPythoninOpenFOAMwithpybind11.html\">Running Python in OpenFOAM with pybind11</a></li>\n</ul>\n","dir":"/howDoesItWork/","name":"README.md","path":"howDoesItWork/README.md","url":"/howDoesItWork/"},{"sort":4,"permalink":"/citing/","layout":"default","title":"Citing","content":"<h1 id=\"citing\">Citing</h1>\n\n<ul>\n <li><a href=\"/citing/bibTexEntry.html\">BibTex entry</a></li>\n</ul>\n","dir":"/citing/","name":"README.md","path":"citing/README.md","url":"/citing/"},{"sort":5,"permalink":"/referenceGuide/","layout":"default","title":"Reference guide","content":"<h1 id=\"reference-guide\">Reference guide</h1>\n\n<ul>\n <li><a href=\"/referenceGuide/API.html\">API</a></li>\n</ul>\n","dir":"/referenceGuide/","name":"README.md","path":"referenceGuide/README.md","url":"/referenceGuide/"},{"sort":6,"permalink":"/about/","layout":"default","title":"About","content":"<h1 id=\"about\">About</h1>\n\n<ul>\n <li><a href=\"/about/contributors.html\">Contributors</a></li>\n</ul>\n","dir":"/about/","name":"README.md","path":"about/README.md","url":"/about/"}]